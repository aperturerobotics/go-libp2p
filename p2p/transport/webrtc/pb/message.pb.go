// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.7.0
// source: github.com/libp2p/go-libp2p/p2p/transport/webrtc/pb/message.proto

package pb

import (
	base64 "encoding/base64"
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
)

type Message_Flag int32

const (
	// The sender will no longer send messages on the stream.
	Message_FIN Message_Flag = 0
	// The sender will no longer read messages on the stream. Incoming data is
	// being discarded on receipt.
	Message_STOP_SENDING Message_Flag = 1
	// The sender abruptly terminates the sending part of the stream. The
	// receiver can discard any data that it already received on that stream.
	Message_RESET Message_Flag = 2
	// Sending the FIN_ACK flag acknowledges the previous receipt of a message
	// with the FIN flag set. Receiving a FIN_ACK flag gives the recipient
	// confidence that the remote has received all sent messages.
	Message_FIN_ACK Message_Flag = 3
)

// Enum value maps for Message_Flag.
var (
	Message_Flag_name = map[int32]string{
		0: "FIN",
		1: "STOP_SENDING",
		2: "RESET",
		3: "FIN_ACK",
	}
	Message_Flag_value = map[string]int32{
		"FIN":          0,
		"STOP_SENDING": 1,
		"RESET":        2,
		"FIN_ACK":      3,
	}
)

func (x Message_Flag) Enum() *Message_Flag {
	p := new(Message_Flag)
	*p = x
	return p
}

func (x Message_Flag) String() string {
	name, valid := Message_Flag_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type Message struct {
	unknownFields []byte
	Flag          *Message_Flag `protobuf:"varint,1,opt,name=flag" json:"flag,omitempty"`
	Message       []byte        `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
}

func (*Message) ProtoMessage() {}

func (x *Message) GetFlag() Message_Flag {
	if x != nil && x.Flag != nil {
		return *x.Flag
	}
	return Message_FIN
}

func (x *Message) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (m *Message) CloneVT() *Message {
	if m == nil {
		return (*Message)(nil)
	}
	r := new(Message)
	if rhs := m.Flag; rhs != nil {
		tmpVal := *rhs
		r.Flag = &tmpVal
	}
	if rhs := m.Message; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Message = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Message) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Message) EqualVT(that *Message) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if p, q := this.Flag, that.Flag; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := this.Message, that.Message; (p == nil && q != nil) || (p != nil && q == nil) || string(p) != string(q) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Message) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Message)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// NOTE: protobuf-go-lite json only supports proto3: proto2 is not supported.

func (m *Message) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Message) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Message != nil {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Flag != nil {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(*m.Flag))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flag != nil {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(*m.Flag))
	}
	if m.Message != nil {
		l = len(m.Message)
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (x Message_Flag) MarshalProtoText() string {
	return x.String()
}
func (x *Message) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Message {")
	if x.Flag != nil {
		if sb.Len() > 9 {
			sb.WriteString(" ")
		}
		sb.WriteString("flag: ")
		sb.WriteString("\"")
		sb.WriteString(x.Flag.String())
		sb.WriteString("\"")
	}
	if x.Message != nil {
		if sb.Len() > 9 {
			sb.WriteString(" ")
		}
		sb.WriteString("message: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Message))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}

func (x *Message) String() string {
	return x.MarshalProtoText()
}
func (m *Message) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var v Message_Flag
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Message_Flag(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Flag = &v
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

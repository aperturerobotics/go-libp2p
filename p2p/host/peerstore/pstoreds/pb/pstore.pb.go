// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/libp2p/go-libp2p/p2p/host/peerstore/pstoreds/pb/pstore.proto

package pstore_pb

import (
	base64 "encoding/base64"
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
)

// AddrBookRecord represents a record for a peer in the address book.
type AddrBookRecord struct {
	unknownFields []byte
	// The peer ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The multiaddresses. This is a sorted list where element 0 expires the soonest.
	Addrs []*AddrBookRecord_AddrEntry `protobuf:"bytes,2,rep,name=addrs,proto3" json:"addrs,omitempty"`
	// The most recently received signed PeerRecord.
	CertifiedRecord *AddrBookRecord_CertifiedRecord `protobuf:"bytes,3,opt,name=certified_record,json=certifiedRecord,proto3" json:"certifiedRecord,omitempty"`
}

func (x *AddrBookRecord) Reset() {
	*x = AddrBookRecord{}
}

func (*AddrBookRecord) ProtoMessage() {}

func (x *AddrBookRecord) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AddrBookRecord) GetAddrs() []*AddrBookRecord_AddrEntry {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *AddrBookRecord) GetCertifiedRecord() *AddrBookRecord_CertifiedRecord {
	if x != nil {
		return x.CertifiedRecord
	}
	return nil
}

// AddrEntry represents a single multiaddress.
type AddrBookRecord_AddrEntry struct {
	unknownFields []byte
	Addr          []byte `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// The point in time when this address expires.
	Expiry int64 `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// The original TTL of this address.
	Ttl int64 `protobuf:"varint,3,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *AddrBookRecord_AddrEntry) Reset() {
	*x = AddrBookRecord_AddrEntry{}
}

func (*AddrBookRecord_AddrEntry) ProtoMessage() {}

func (x *AddrBookRecord_AddrEntry) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *AddrBookRecord_AddrEntry) GetExpiry() int64 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *AddrBookRecord_AddrEntry) GetTtl() int64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// CertifiedRecord contains a serialized signed PeerRecord used to
// populate the signedAddrs list.
type AddrBookRecord_CertifiedRecord struct {
	unknownFields []byte
	// The Seq counter from the signed PeerRecord envelope
	Seq uint64 `protobuf:"varint,1,opt,name=seq,proto3" json:"seq,omitempty"`
	// The serialized bytes of the SignedEnvelope containing the PeerRecord.
	Raw []byte `protobuf:"bytes,2,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *AddrBookRecord_CertifiedRecord) Reset() {
	*x = AddrBookRecord_CertifiedRecord{}
}

func (*AddrBookRecord_CertifiedRecord) ProtoMessage() {}

func (x *AddrBookRecord_CertifiedRecord) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *AddrBookRecord_CertifiedRecord) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (m *AddrBookRecord_AddrEntry) CloneVT() *AddrBookRecord_AddrEntry {
	if m == nil {
		return (*AddrBookRecord_AddrEntry)(nil)
	}
	r := new(AddrBookRecord_AddrEntry)
	r.Expiry = m.Expiry
	r.Ttl = m.Ttl
	if rhs := m.Addr; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Addr = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AddrBookRecord_AddrEntry) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *AddrBookRecord_CertifiedRecord) CloneVT() *AddrBookRecord_CertifiedRecord {
	if m == nil {
		return (*AddrBookRecord_CertifiedRecord)(nil)
	}
	r := new(AddrBookRecord_CertifiedRecord)
	r.Seq = m.Seq
	if rhs := m.Raw; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Raw = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AddrBookRecord_CertifiedRecord) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *AddrBookRecord) CloneVT() *AddrBookRecord {
	if m == nil {
		return (*AddrBookRecord)(nil)
	}
	r := new(AddrBookRecord)
	r.CertifiedRecord = m.CertifiedRecord.CloneVT()
	if rhs := m.Id; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Id = tmpBytes
	}
	if rhs := m.Addrs; rhs != nil {
		tmpContainer := make([]*AddrBookRecord_AddrEntry, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Addrs = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AddrBookRecord) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *AddrBookRecord_AddrEntry) EqualVT(that *AddrBookRecord_AddrEntry) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if string(this.Addr) != string(that.Addr) {
		return false
	}
	if this.Expiry != that.Expiry {
		return false
	}
	if this.Ttl != that.Ttl {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AddrBookRecord_AddrEntry) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*AddrBookRecord_AddrEntry)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AddrBookRecord_CertifiedRecord) EqualVT(that *AddrBookRecord_CertifiedRecord) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Seq != that.Seq {
		return false
	}
	if string(this.Raw) != string(that.Raw) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AddrBookRecord_CertifiedRecord) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*AddrBookRecord_CertifiedRecord)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AddrBookRecord) EqualVT(that *AddrBookRecord) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if string(this.Id) != string(that.Id) {
		return false
	}
	if len(this.Addrs) != len(that.Addrs) {
		return false
	}
	for i, vx := range this.Addrs {
		vy := that.Addrs[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &AddrBookRecord_AddrEntry{}
			}
			if q == nil {
				q = &AddrBookRecord_AddrEntry{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.CertifiedRecord.EqualVT(that.CertifiedRecord) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AddrBookRecord) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*AddrBookRecord)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the AddrBookRecord_AddrEntry message to JSON.
func (x *AddrBookRecord_AddrEntry) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Addr) > 0 || s.HasField("addr") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("addr")
		s.WriteBytes(x.Addr)
	}
	if x.Expiry != 0 || s.HasField("expiry") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("expiry")
		s.WriteInt64(x.Expiry)
	}
	if x.Ttl != 0 || s.HasField("ttl") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ttl")
		s.WriteInt64(x.Ttl)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the AddrBookRecord_AddrEntry to JSON.
func (x *AddrBookRecord_AddrEntry) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AddrBookRecord_AddrEntry message from JSON.
func (x *AddrBookRecord_AddrEntry) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "addr":
			s.AddField("addr")
			x.Addr = s.ReadBytes()
		case "expiry":
			s.AddField("expiry")
			x.Expiry = s.ReadInt64()
		case "ttl":
			s.AddField("ttl")
			x.Ttl = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the AddrBookRecord_AddrEntry from JSON.
func (x *AddrBookRecord_AddrEntry) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the AddrBookRecord_CertifiedRecord message to JSON.
func (x *AddrBookRecord_CertifiedRecord) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Seq != 0 || s.HasField("seq") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("seq")
		s.WriteUint64(x.Seq)
	}
	if len(x.Raw) > 0 || s.HasField("raw") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("raw")
		s.WriteBytes(x.Raw)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the AddrBookRecord_CertifiedRecord to JSON.
func (x *AddrBookRecord_CertifiedRecord) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AddrBookRecord_CertifiedRecord message from JSON.
func (x *AddrBookRecord_CertifiedRecord) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "seq":
			s.AddField("seq")
			x.Seq = s.ReadUint64()
		case "raw":
			s.AddField("raw")
			x.Raw = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the AddrBookRecord_CertifiedRecord from JSON.
func (x *AddrBookRecord_CertifiedRecord) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the AddrBookRecord message to JSON.
func (x *AddrBookRecord) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Id) > 0 || s.HasField("id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("id")
		s.WriteBytes(x.Id)
	}
	if len(x.Addrs) > 0 || s.HasField("addrs") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("addrs")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Addrs {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("addrs"))
		}
		s.WriteArrayEnd()
	}
	if x.CertifiedRecord != nil || s.HasField("certifiedRecord") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("certifiedRecord")
		x.CertifiedRecord.MarshalProtoJSON(s.WithField("certifiedRecord"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the AddrBookRecord to JSON.
func (x *AddrBookRecord) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AddrBookRecord message from JSON.
func (x *AddrBookRecord) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "id":
			s.AddField("id")
			x.Id = s.ReadBytes()
		case "addrs":
			s.AddField("addrs")
			if s.ReadNil() {
				x.Addrs = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Addrs = append(x.Addrs, nil)
					return
				}
				v := &AddrBookRecord_AddrEntry{}
				v.UnmarshalProtoJSON(s.WithField("addrs", false))
				if s.Err() != nil {
					return
				}
				x.Addrs = append(x.Addrs, v)
			})
		case "certified_record", "certifiedRecord":
			if s.ReadNil() {
				x.CertifiedRecord = nil
				return
			}
			x.CertifiedRecord = &AddrBookRecord_CertifiedRecord{}
			x.CertifiedRecord.UnmarshalProtoJSON(s.WithField("certified_record", true))
		}
	})
}

// UnmarshalJSON unmarshals the AddrBookRecord from JSON.
func (x *AddrBookRecord) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *AddrBookRecord_AddrEntry) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrBookRecord_AddrEntry) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *AddrBookRecord_AddrEntry) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Ttl != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Ttl))
		i--
		dAtA[i] = 0x18
	}
	if m.Expiry != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddrBookRecord_CertifiedRecord) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrBookRecord_CertifiedRecord) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *AddrBookRecord_CertifiedRecord) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0x12
	}
	if m.Seq != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Seq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddrBookRecord) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrBookRecord) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *AddrBookRecord) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.CertifiedRecord != nil {
		size, err := m.CertifiedRecord.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Addrs[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddrBookRecord_AddrEntry) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Expiry))
	}
	if m.Ttl != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Ttl))
	}
	n += len(m.unknownFields)
	return n
}

func (m *AddrBookRecord_CertifiedRecord) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seq != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Seq))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *AddrBookRecord) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, e := range m.Addrs {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.CertifiedRecord != nil {
		l = m.CertifiedRecord.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (x *AddrBookRecord_AddrEntry) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("AddrEntry { ")
	if len(x.Addr) > 0 {
		sb.WriteString(" addr: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Addr))
		sb.WriteString("\"")
	}
	if x.Expiry != 0 {
		sb.WriteString(" expiry: ")
		sb.WriteString(strconv.FormatInt(int64(x.Expiry), 10))
	}
	if x.Ttl != 0 {
		sb.WriteString(" ttl: ")
		sb.WriteString(strconv.FormatInt(int64(x.Ttl), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *AddrBookRecord_AddrEntry) String() string {
	return x.MarshalProtoText()
}
func (x *AddrBookRecord_CertifiedRecord) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("CertifiedRecord { ")
	if x.Seq != 0 {
		sb.WriteString(" seq: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Seq), 10))
	}
	if len(x.Raw) > 0 {
		sb.WriteString(" raw: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Raw))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *AddrBookRecord_CertifiedRecord) String() string {
	return x.MarshalProtoText()
}
func (x *AddrBookRecord) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("AddrBookRecord { ")
	if len(x.Id) > 0 {
		sb.WriteString(" id: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Id))
		sb.WriteString("\"")
	}
	if len(x.Addrs) > 0 {
		sb.WriteString(" addrs: [")
		for i, v := range x.Addrs {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.CertifiedRecord != nil {
		sb.WriteString(" certified_record: ")
		sb.WriteString(x.CertifiedRecord.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *AddrBookRecord) String() string {
	return x.MarshalProtoText()
}
func (m *AddrBookRecord_AddrEntry) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrBookRecord_AddrEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrBookRecord_AddrEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ttl", wireType)
			}
			m.Ttl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ttl |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrBookRecord_CertifiedRecord) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrBookRecord_CertifiedRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrBookRecord_CertifiedRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrBookRecord) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrBookRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrBookRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, &AddrBookRecord_AddrEntry{})
			if err := m.Addrs[len(m.Addrs)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertifiedRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CertifiedRecord == nil {
				m.CertifiedRecord = &AddrBookRecord_CertifiedRecord{}
			}
			if err := m.CertifiedRecord.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

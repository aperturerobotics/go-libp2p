// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.7.0
// source: github.com/libp2p/go-libp2p/p2p/protocol/circuitv2/pb/voucher.proto

package circuit_pb

import (
	base64 "encoding/base64"
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
)

type ReservationVoucher struct {
	unknownFields []byte
	// These fields are marked optional for backwards compatibility with proto2.
	// Users should make sure to always set these.
	Relay      []byte  `protobuf:"bytes,1,opt,name=relay,proto3,oneof" json:"relay,omitempty"`
	Peer       []byte  `protobuf:"bytes,2,opt,name=peer,proto3,oneof" json:"peer,omitempty"`
	Expiration *uint64 `protobuf:"varint,3,opt,name=expiration,proto3,oneof" json:"expiration,omitempty"`
}

func (x *ReservationVoucher) Reset() {
	*x = ReservationVoucher{}
}

func (*ReservationVoucher) ProtoMessage() {}

func (x *ReservationVoucher) GetRelay() []byte {
	if x != nil {
		return x.Relay
	}
	return nil
}

func (x *ReservationVoucher) GetPeer() []byte {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ReservationVoucher) GetExpiration() uint64 {
	if x != nil && x.Expiration != nil {
		return *x.Expiration
	}
	return 0
}

func (m *ReservationVoucher) CloneVT() *ReservationVoucher {
	if m == nil {
		return (*ReservationVoucher)(nil)
	}
	r := new(ReservationVoucher)
	if rhs := m.Relay; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Relay = tmpBytes
	}
	if rhs := m.Peer; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Peer = tmpBytes
	}
	if rhs := m.Expiration; rhs != nil {
		tmpVal := *rhs
		r.Expiration = &tmpVal
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReservationVoucher) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *ReservationVoucher) EqualVT(that *ReservationVoucher) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if p, q := this.Relay, that.Relay; (p == nil && q != nil) || (p != nil && q == nil) || string(p) != string(q) {
		return false
	}
	if p, q := this.Peer, that.Peer; (p == nil && q != nil) || (p != nil && q == nil) || string(p) != string(q) {
		return false
	}
	if p, q := this.Expiration, that.Expiration; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReservationVoucher) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ReservationVoucher)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// NOTE: protobuf-go-lite json only supports proto3 and not proto3opt (optional fields).

func (m *ReservationVoucher) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReservationVoucher) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ReservationVoucher) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Expiration != nil {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(*m.Expiration))
		i--
		dAtA[i] = 0x18
	}
	if m.Peer != nil {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Relay != nil {
		i -= len(m.Relay)
		copy(dAtA[i:], m.Relay)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Relay)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReservationVoucher) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Relay != nil {
		l = len(m.Relay)
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Expiration != nil {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(*m.Expiration))
	}
	n += len(m.unknownFields)
	return n
}

func (x *ReservationVoucher) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ReservationVoucher {")
	if x.Relay != nil {
		if sb.Len() > 20 {
			sb.WriteString(" ")
		}
		sb.WriteString("relay: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Relay))
		sb.WriteString("\"")
	}
	if x.Peer != nil {
		if sb.Len() > 20 {
			sb.WriteString(" ")
		}
		sb.WriteString("peer: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Peer))
		sb.WriteString("\"")
	}
	if x.Expiration != nil {
		if sb.Len() > 20 {
			sb.WriteString(" ")
		}
		sb.WriteString("expiration: ")
		sb.WriteString(strconv.FormatUint(uint64(*x.Expiration), 10))
	}
	sb.WriteString("}")
	return sb.String()
}

func (x *ReservationVoucher) String() string {
	return x.MarshalProtoText()
}
func (m *ReservationVoucher) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReservationVoucher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReservationVoucher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Relay", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Relay = append(m.Relay[:0], dAtA[iNdEx:postIndex]...)
			if m.Relay == nil {
				m.Relay = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Expiration = &v
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

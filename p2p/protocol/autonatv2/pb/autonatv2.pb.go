// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/libp2p/go-libp2p/p2p/protocol/autonatv2/pb/autonatv2.proto

package autonatv2_pb

import (
	base64 "encoding/base64"
	binary "encoding/binary"
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
)

type DialStatus int32

const (
	DialStatus_UNUSED            DialStatus = 0
	DialStatus_E_DIAL_ERROR      DialStatus = 100
	DialStatus_E_DIAL_BACK_ERROR DialStatus = 101
	DialStatus_OK                DialStatus = 200
)

// Enum value maps for DialStatus.
var (
	DialStatus_name = map[int32]string{
		0:   "UNUSED",
		100: "E_DIAL_ERROR",
		101: "E_DIAL_BACK_ERROR",
		200: "OK",
	}
	DialStatus_value = map[string]int32{
		"UNUSED":            0,
		"E_DIAL_ERROR":      100,
		"E_DIAL_BACK_ERROR": 101,
		"OK":                200,
	}
)

func (x DialStatus) Enum() *DialStatus {
	p := new(DialStatus)
	*p = x
	return p
}

func (x DialStatus) String() string {
	name, valid := DialStatus_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type DialResponse_ResponseStatus int32

const (
	DialResponse_E_INTERNAL_ERROR   DialResponse_ResponseStatus = 0
	DialResponse_E_REQUEST_REJECTED DialResponse_ResponseStatus = 100
	DialResponse_E_DIAL_REFUSED     DialResponse_ResponseStatus = 101
	DialResponse_OK                 DialResponse_ResponseStatus = 200
)

// Enum value maps for DialResponse_ResponseStatus.
var (
	DialResponse_ResponseStatus_name = map[int32]string{
		0:   "E_INTERNAL_ERROR",
		100: "E_REQUEST_REJECTED",
		101: "E_DIAL_REFUSED",
		200: "OK",
	}
	DialResponse_ResponseStatus_value = map[string]int32{
		"E_INTERNAL_ERROR":   0,
		"E_REQUEST_REJECTED": 100,
		"E_DIAL_REFUSED":     101,
		"OK":                 200,
	}
)

func (x DialResponse_ResponseStatus) Enum() *DialResponse_ResponseStatus {
	p := new(DialResponse_ResponseStatus)
	*p = x
	return p
}

func (x DialResponse_ResponseStatus) String() string {
	name, valid := DialResponse_ResponseStatus_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type DialBackResponse_DialBackStatus int32

const (
	DialBackResponse_OK DialBackResponse_DialBackStatus = 0
)

// Enum value maps for DialBackResponse_DialBackStatus.
var (
	DialBackResponse_DialBackStatus_name = map[int32]string{
		0: "OK",
	}
	DialBackResponse_DialBackStatus_value = map[string]int32{
		"OK": 0,
	}
)

func (x DialBackResponse_DialBackStatus) Enum() *DialBackResponse_DialBackStatus {
	p := new(DialBackResponse_DialBackStatus)
	*p = x
	return p
}

func (x DialBackResponse_DialBackStatus) String() string {
	name, valid := DialBackResponse_DialBackStatus_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type Message struct {
	unknownFields []byte
	// Types that are assignable to Msg:
	//
	//	*Message_DialRequest
	//	*Message_DialResponse
	//	*Message_DialDataRequest
	//	*Message_DialDataResponse
	Msg isMessage_Msg `protobuf_oneof:"msg"`
}

func (x *Message) Reset() {
	*x = Message{}
}

func (*Message) ProtoMessage() {}

func (m *Message) GetMsg() isMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (x *Message) GetDialRequest() *DialRequest {
	if x, ok := x.GetMsg().(*Message_DialRequest); ok {
		return x.DialRequest
	}
	return nil
}

func (x *Message) GetDialResponse() *DialResponse {
	if x, ok := x.GetMsg().(*Message_DialResponse); ok {
		return x.DialResponse
	}
	return nil
}

func (x *Message) GetDialDataRequest() *DialDataRequest {
	if x, ok := x.GetMsg().(*Message_DialDataRequest); ok {
		return x.DialDataRequest
	}
	return nil
}

func (x *Message) GetDialDataResponse() *DialDataResponse {
	if x, ok := x.GetMsg().(*Message_DialDataResponse); ok {
		return x.DialDataResponse
	}
	return nil
}

type isMessage_Msg interface {
	isMessage_Msg()
}

type Message_DialRequest struct {
	DialRequest *DialRequest `protobuf:"bytes,1,opt,name=dialRequest,proto3,oneof"`
}

type Message_DialResponse struct {
	DialResponse *DialResponse `protobuf:"bytes,2,opt,name=dialResponse,proto3,oneof"`
}

type Message_DialDataRequest struct {
	DialDataRequest *DialDataRequest `protobuf:"bytes,3,opt,name=dialDataRequest,proto3,oneof"`
}

type Message_DialDataResponse struct {
	DialDataResponse *DialDataResponse `protobuf:"bytes,4,opt,name=dialDataResponse,proto3,oneof"`
}

func (*Message_DialRequest) isMessage_Msg() {}

func (*Message_DialResponse) isMessage_Msg() {}

func (*Message_DialDataRequest) isMessage_Msg() {}

func (*Message_DialDataResponse) isMessage_Msg() {}

type DialRequest struct {
	unknownFields []byte
	Addrs         [][]byte `protobuf:"bytes,1,rep,name=addrs,proto3" json:"addrs,omitempty"`
	Nonce         uint64   `protobuf:"fixed64,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *DialRequest) Reset() {
	*x = DialRequest{}
}

func (*DialRequest) ProtoMessage() {}

func (x *DialRequest) GetAddrs() [][]byte {
	if x != nil {
		return x.Addrs
	}
	return nil
}

func (x *DialRequest) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type DialDataRequest struct {
	unknownFields []byte
	AddrIdx       uint32 `protobuf:"varint,1,opt,name=addrIdx,proto3" json:"addrIdx,omitempty"`
	NumBytes      uint64 `protobuf:"varint,2,opt,name=numBytes,proto3" json:"numBytes,omitempty"`
}

func (x *DialDataRequest) Reset() {
	*x = DialDataRequest{}
}

func (*DialDataRequest) ProtoMessage() {}

func (x *DialDataRequest) GetAddrIdx() uint32 {
	if x != nil {
		return x.AddrIdx
	}
	return 0
}

func (x *DialDataRequest) GetNumBytes() uint64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

type DialResponse struct {
	unknownFields []byte
	Status        DialResponse_ResponseStatus `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	AddrIdx       uint32                      `protobuf:"varint,2,opt,name=addrIdx,proto3" json:"addrIdx,omitempty"`
	DialStatus    DialStatus                  `protobuf:"varint,3,opt,name=dialStatus,proto3" json:"dialStatus,omitempty"`
}

func (x *DialResponse) Reset() {
	*x = DialResponse{}
}

func (*DialResponse) ProtoMessage() {}

func (x *DialResponse) GetStatus() DialResponse_ResponseStatus {
	if x != nil {
		return x.Status
	}
	return DialResponse_E_INTERNAL_ERROR
}

func (x *DialResponse) GetAddrIdx() uint32 {
	if x != nil {
		return x.AddrIdx
	}
	return 0
}

func (x *DialResponse) GetDialStatus() DialStatus {
	if x != nil {
		return x.DialStatus
	}
	return DialStatus_UNUSED
}

type DialDataResponse struct {
	unknownFields []byte
	Data          []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DialDataResponse) Reset() {
	*x = DialDataResponse{}
}

func (*DialDataResponse) ProtoMessage() {}

func (x *DialDataResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type DialBack struct {
	unknownFields []byte
	Nonce         uint64 `protobuf:"fixed64,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *DialBack) Reset() {
	*x = DialBack{}
}

func (*DialBack) ProtoMessage() {}

func (x *DialBack) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

type DialBackResponse struct {
	unknownFields []byte
	Status        DialBackResponse_DialBackStatus `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DialBackResponse) Reset() {
	*x = DialBackResponse{}
}

func (*DialBackResponse) ProtoMessage() {}

func (x *DialBackResponse) GetStatus() DialBackResponse_DialBackStatus {
	if x != nil {
		return x.Status
	}
	return DialBackResponse_OK
}

func (m *Message) CloneVT() *Message {
	if m == nil {
		return (*Message)(nil)
	}
	r := new(Message)
	if m.Msg != nil {
		r.Msg = m.Msg.(interface{ CloneOneofVT() isMessage_Msg }).CloneOneofVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Message) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Message_DialRequest) CloneVT() *Message_DialRequest {
	if m == nil {
		return (*Message_DialRequest)(nil)
	}
	r := new(Message_DialRequest)
	r.DialRequest = m.DialRequest.CloneVT()
	return r
}

func (m *Message_DialRequest) CloneOneofVT() isMessage_Msg {
	return m.CloneVT()
}

func (m *Message_DialResponse) CloneVT() *Message_DialResponse {
	if m == nil {
		return (*Message_DialResponse)(nil)
	}
	r := new(Message_DialResponse)
	r.DialResponse = m.DialResponse.CloneVT()
	return r
}

func (m *Message_DialResponse) CloneOneofVT() isMessage_Msg {
	return m.CloneVT()
}

func (m *Message_DialDataRequest) CloneVT() *Message_DialDataRequest {
	if m == nil {
		return (*Message_DialDataRequest)(nil)
	}
	r := new(Message_DialDataRequest)
	r.DialDataRequest = m.DialDataRequest.CloneVT()
	return r
}

func (m *Message_DialDataRequest) CloneOneofVT() isMessage_Msg {
	return m.CloneVT()
}

func (m *Message_DialDataResponse) CloneVT() *Message_DialDataResponse {
	if m == nil {
		return (*Message_DialDataResponse)(nil)
	}
	r := new(Message_DialDataResponse)
	r.DialDataResponse = m.DialDataResponse.CloneVT()
	return r
}

func (m *Message_DialDataResponse) CloneOneofVT() isMessage_Msg {
	return m.CloneVT()
}

func (m *DialRequest) CloneVT() *DialRequest {
	if m == nil {
		return (*DialRequest)(nil)
	}
	r := new(DialRequest)
	r.Nonce = m.Nonce
	if rhs := m.Addrs; rhs != nil {
		tmpContainer := make([][]byte, len(rhs))
		for k, v := range rhs {
			tmpBytes := make([]byte, len(v))
			copy(tmpBytes, v)
			tmpContainer[k] = tmpBytes
		}
		r.Addrs = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DialRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *DialDataRequest) CloneVT() *DialDataRequest {
	if m == nil {
		return (*DialDataRequest)(nil)
	}
	r := new(DialDataRequest)
	r.AddrIdx = m.AddrIdx
	r.NumBytes = m.NumBytes
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DialDataRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *DialResponse) CloneVT() *DialResponse {
	if m == nil {
		return (*DialResponse)(nil)
	}
	r := new(DialResponse)
	r.Status = m.Status
	r.AddrIdx = m.AddrIdx
	r.DialStatus = m.DialStatus
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DialResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *DialDataResponse) CloneVT() *DialDataResponse {
	if m == nil {
		return (*DialDataResponse)(nil)
	}
	r := new(DialDataResponse)
	if rhs := m.Data; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Data = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DialDataResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *DialBack) CloneVT() *DialBack {
	if m == nil {
		return (*DialBack)(nil)
	}
	r := new(DialBack)
	r.Nonce = m.Nonce
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DialBack) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *DialBackResponse) CloneVT() *DialBackResponse {
	if m == nil {
		return (*DialBackResponse)(nil)
	}
	r := new(DialBackResponse)
	r.Status = m.Status
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *DialBackResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Message) EqualVT(that *Message) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Msg == nil && that.Msg != nil {
		return false
	} else if this.Msg != nil {
		if that.Msg == nil {
			return false
		}
		if !this.Msg.(interface{ EqualVT(isMessage_Msg) bool }).EqualVT(that.Msg) {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Message) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Message)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Message_DialRequest) EqualVT(thatIface isMessage_Msg) bool {
	that, ok := thatIface.(*Message_DialRequest)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DialRequest, that.DialRequest; p != q {
		if p == nil {
			p = &DialRequest{}
		}
		if q == nil {
			q = &DialRequest{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Message_DialResponse) EqualVT(thatIface isMessage_Msg) bool {
	that, ok := thatIface.(*Message_DialResponse)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DialResponse, that.DialResponse; p != q {
		if p == nil {
			p = &DialResponse{}
		}
		if q == nil {
			q = &DialResponse{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Message_DialDataRequest) EqualVT(thatIface isMessage_Msg) bool {
	that, ok := thatIface.(*Message_DialDataRequest)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DialDataRequest, that.DialDataRequest; p != q {
		if p == nil {
			p = &DialDataRequest{}
		}
		if q == nil {
			q = &DialDataRequest{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *Message_DialDataResponse) EqualVT(thatIface isMessage_Msg) bool {
	that, ok := thatIface.(*Message_DialDataResponse)
	if !ok {
		return false
	}
	if this == that {
		return true
	}
	if this == nil && that != nil || this != nil && that == nil {
		return false
	}
	if p, q := this.DialDataResponse, that.DialDataResponse; p != q {
		if p == nil {
			p = &DialDataResponse{}
		}
		if q == nil {
			q = &DialDataResponse{}
		}
		if !p.EqualVT(q) {
			return false
		}
	}
	return true
}

func (this *DialRequest) EqualVT(that *DialRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Addrs) != len(that.Addrs) {
		return false
	}
	for i, vx := range this.Addrs {
		vy := that.Addrs[i]
		if string(vx) != string(vy) {
			return false
		}
	}
	if this.Nonce != that.Nonce {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DialRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*DialRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DialDataRequest) EqualVT(that *DialDataRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.AddrIdx != that.AddrIdx {
		return false
	}
	if this.NumBytes != that.NumBytes {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DialDataRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*DialDataRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DialResponse) EqualVT(that *DialResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	if this.AddrIdx != that.AddrIdx {
		return false
	}
	if this.DialStatus != that.DialStatus {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DialResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*DialResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DialDataResponse) EqualVT(that *DialDataResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if string(this.Data) != string(that.Data) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DialDataResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*DialDataResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DialBack) EqualVT(that *DialBack) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Nonce != that.Nonce {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DialBack) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*DialBack)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *DialBackResponse) EqualVT(that *DialBackResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Status != that.Status {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *DialBackResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*DialBackResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the DialStatus to JSON.
func (x DialStatus) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), DialStatus_name)
}

// MarshalText marshals the DialStatus to text.
func (x DialStatus) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), DialStatus_name)), nil
}

// MarshalJSON marshals the DialStatus to JSON.
func (x DialStatus) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialStatus from JSON.
func (x *DialStatus) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(DialStatus_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read DialStatus enum: %v", err)
		return
	}
	*x = DialStatus(v)
}

// UnmarshalText unmarshals the DialStatus from text.
func (x *DialStatus) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), DialStatus_value)
	if err != nil {
		return err
	}
	*x = DialStatus(i)
	return nil
}

// UnmarshalJSON unmarshals the DialStatus from JSON.
func (x *DialStatus) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Message message to JSON.
func (x *Message) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Msg != nil {
		switch ov := x.Msg.(type) {
		case *Message_DialRequest:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dialRequest")
			ov.DialRequest.MarshalProtoJSON(s.WithField("dialRequest"))
		case *Message_DialResponse:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dialResponse")
			ov.DialResponse.MarshalProtoJSON(s.WithField("dialResponse"))
		case *Message_DialDataRequest:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dialDataRequest")
			ov.DialDataRequest.MarshalProtoJSON(s.WithField("dialDataRequest"))
		case *Message_DialDataResponse:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dialDataResponse")
			ov.DialDataResponse.MarshalProtoJSON(s.WithField("dialDataResponse"))
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Message to JSON.
func (x *Message) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Message message from JSON.
func (x *Message) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "dialRequest":
			ov := &Message_DialRequest{}
			x.Msg = ov
			if s.ReadNil() {
				ov.DialRequest = nil
				return
			}
			ov.DialRequest = &DialRequest{}
			ov.DialRequest.UnmarshalProtoJSON(s.WithField("dialRequest", true))
		case "dialResponse":
			ov := &Message_DialResponse{}
			x.Msg = ov
			if s.ReadNil() {
				ov.DialResponse = nil
				return
			}
			ov.DialResponse = &DialResponse{}
			ov.DialResponse.UnmarshalProtoJSON(s.WithField("dialResponse", true))
		case "dialDataRequest":
			ov := &Message_DialDataRequest{}
			x.Msg = ov
			if s.ReadNil() {
				ov.DialDataRequest = nil
				return
			}
			ov.DialDataRequest = &DialDataRequest{}
			ov.DialDataRequest.UnmarshalProtoJSON(s.WithField("dialDataRequest", true))
		case "dialDataResponse":
			ov := &Message_DialDataResponse{}
			x.Msg = ov
			if s.ReadNil() {
				ov.DialDataResponse = nil
				return
			}
			ov.DialDataResponse = &DialDataResponse{}
			ov.DialDataResponse.UnmarshalProtoJSON(s.WithField("dialDataResponse", true))
		}
	})
}

// UnmarshalJSON unmarshals the Message from JSON.
func (x *Message) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialRequest message to JSON.
func (x *DialRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Addrs) > 0 || s.HasField("addrs") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("addrs")
		s.WriteBytesArray(x.Addrs)
	}
	if x.Nonce != 0 || s.HasField("nonce") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nonce")
		s.WriteUint64(x.Nonce)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DialRequest to JSON.
func (x *DialRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialRequest message from JSON.
func (x *DialRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "addrs":
			s.AddField("addrs")
			if s.ReadNil() {
				x.Addrs = nil
				return
			}
			x.Addrs = s.ReadBytesArray()
		case "nonce":
			s.AddField("nonce")
			x.Nonce = s.ReadUint64()
		}
	})
}

// UnmarshalJSON unmarshals the DialRequest from JSON.
func (x *DialRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialDataRequest message to JSON.
func (x *DialDataRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.AddrIdx != 0 || s.HasField("addrIdx") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("addrIdx")
		s.WriteUint32(x.AddrIdx)
	}
	if x.NumBytes != 0 || s.HasField("numBytes") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("numBytes")
		s.WriteUint64(x.NumBytes)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DialDataRequest to JSON.
func (x *DialDataRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialDataRequest message from JSON.
func (x *DialDataRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "addrIdx":
			s.AddField("addrIdx")
			x.AddrIdx = s.ReadUint32()
		case "numBytes":
			s.AddField("numBytes")
			x.NumBytes = s.ReadUint64()
		}
	})
}

// UnmarshalJSON unmarshals the DialDataRequest from JSON.
func (x *DialDataRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialResponse_ResponseStatus to JSON.
func (x DialResponse_ResponseStatus) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), DialResponse_ResponseStatus_name)
}

// MarshalText marshals the DialResponse_ResponseStatus to text.
func (x DialResponse_ResponseStatus) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), DialResponse_ResponseStatus_name)), nil
}

// MarshalJSON marshals the DialResponse_ResponseStatus to JSON.
func (x DialResponse_ResponseStatus) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialResponse_ResponseStatus from JSON.
func (x *DialResponse_ResponseStatus) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(DialResponse_ResponseStatus_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read ResponseStatus enum: %v", err)
		return
	}
	*x = DialResponse_ResponseStatus(v)
}

// UnmarshalText unmarshals the DialResponse_ResponseStatus from text.
func (x *DialResponse_ResponseStatus) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), DialResponse_ResponseStatus_value)
	if err != nil {
		return err
	}
	*x = DialResponse_ResponseStatus(i)
	return nil
}

// UnmarshalJSON unmarshals the DialResponse_ResponseStatus from JSON.
func (x *DialResponse_ResponseStatus) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialResponse message to JSON.
func (x *DialResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Status != 0 || s.HasField("status") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("status")
		x.Status.MarshalProtoJSON(s)
	}
	if x.AddrIdx != 0 || s.HasField("addrIdx") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("addrIdx")
		s.WriteUint32(x.AddrIdx)
	}
	if x.DialStatus != 0 || s.HasField("dialStatus") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dialStatus")
		x.DialStatus.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DialResponse to JSON.
func (x *DialResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialResponse message from JSON.
func (x *DialResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "status":
			s.AddField("status")
			x.Status.UnmarshalProtoJSON(s)
		case "addrIdx":
			s.AddField("addrIdx")
			x.AddrIdx = s.ReadUint32()
		case "dialStatus":
			s.AddField("dialStatus")
			x.DialStatus.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the DialResponse from JSON.
func (x *DialResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialDataResponse message to JSON.
func (x *DialDataResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Data) > 0 || s.HasField("data") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("data")
		s.WriteBytes(x.Data)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DialDataResponse to JSON.
func (x *DialDataResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialDataResponse message from JSON.
func (x *DialDataResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "data":
			s.AddField("data")
			x.Data = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the DialDataResponse from JSON.
func (x *DialDataResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialBack message to JSON.
func (x *DialBack) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Nonce != 0 || s.HasField("nonce") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nonce")
		s.WriteUint64(x.Nonce)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DialBack to JSON.
func (x *DialBack) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialBack message from JSON.
func (x *DialBack) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "nonce":
			s.AddField("nonce")
			x.Nonce = s.ReadUint64()
		}
	})
}

// UnmarshalJSON unmarshals the DialBack from JSON.
func (x *DialBack) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialBackResponse_DialBackStatus to JSON.
func (x DialBackResponse_DialBackStatus) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), DialBackResponse_DialBackStatus_name)
}

// MarshalText marshals the DialBackResponse_DialBackStatus to text.
func (x DialBackResponse_DialBackStatus) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), DialBackResponse_DialBackStatus_name)), nil
}

// MarshalJSON marshals the DialBackResponse_DialBackStatus to JSON.
func (x DialBackResponse_DialBackStatus) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialBackResponse_DialBackStatus from JSON.
func (x *DialBackResponse_DialBackStatus) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(DialBackResponse_DialBackStatus_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read DialBackStatus enum: %v", err)
		return
	}
	*x = DialBackResponse_DialBackStatus(v)
}

// UnmarshalText unmarshals the DialBackResponse_DialBackStatus from text.
func (x *DialBackResponse_DialBackStatus) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), DialBackResponse_DialBackStatus_value)
	if err != nil {
		return err
	}
	*x = DialBackResponse_DialBackStatus(i)
	return nil
}

// UnmarshalJSON unmarshals the DialBackResponse_DialBackStatus from JSON.
func (x *DialBackResponse_DialBackStatus) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DialBackResponse message to JSON.
func (x *DialBackResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Status != 0 || s.HasField("status") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("status")
		x.Status.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DialBackResponse to JSON.
func (x *DialBackResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DialBackResponse message from JSON.
func (x *DialBackResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "status":
			s.AddField("status")
			x.Status.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the DialBackResponse from JSON.
func (x *DialBackResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Message) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Message) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if vtmsg, ok := m.Msg.(interface {
		MarshalToSizedBufferVT([]byte) (int, error)
	}); ok {
		size, err := vtmsg.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
	}
	return len(dAtA) - i, nil
}

func (m *Message_DialRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Message_DialRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DialRequest != nil {
		size, err := m.DialRequest.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	} else {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, 0)
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Message_DialResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Message_DialResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DialResponse != nil {
		size, err := m.DialResponse.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	} else {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, 0)
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Message_DialDataRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Message_DialDataRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DialDataRequest != nil {
		size, err := m.DialDataRequest.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	} else {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, 0)
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Message_DialDataResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Message_DialDataResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DialDataResponse != nil {
		size, err := m.DialDataResponse.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	} else {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, 0)
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DialRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DialRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Nonce != 0 {
		i -= 8
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Nonce))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DialDataRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialDataRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DialDataRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.NumBytes != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.NumBytes))
		i--
		dAtA[i] = 0x10
	}
	if m.AddrIdx != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.AddrIdx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DialResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DialResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.DialStatus != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.DialStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.AddrIdx != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.AddrIdx))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DialDataResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialDataResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DialDataResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DialBack) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialBack) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DialBack) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Nonce != 0 {
		i -= 8
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Nonce))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *DialBackResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialBackResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *DialBackResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Status != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Message) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if vtmsg, ok := m.Msg.(interface{ SizeVT() int }); ok {
		n += vtmsg.SizeVT()
	}
	n += len(m.unknownFields)
	return n
}

func (m *Message_DialRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DialRequest != nil {
		l = m.DialRequest.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	} else {
		n += 2
	}
	return n
}
func (m *Message_DialResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DialResponse != nil {
		l = m.DialResponse.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	} else {
		n += 2
	}
	return n
}
func (m *Message_DialDataRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DialDataRequest != nil {
		l = m.DialDataRequest.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	} else {
		n += 2
	}
	return n
}
func (m *Message_DialDataResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DialDataResponse != nil {
		l = m.DialDataResponse.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	} else {
		n += 2
	}
	return n
}
func (m *DialRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.Nonce != 0 {
		n += 9
	}
	n += len(m.unknownFields)
	return n
}

func (m *DialDataRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddrIdx != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.AddrIdx))
	}
	if m.NumBytes != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.NumBytes))
	}
	n += len(m.unknownFields)
	return n
}

func (m *DialResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Status))
	}
	if m.AddrIdx != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.AddrIdx))
	}
	if m.DialStatus != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.DialStatus))
	}
	n += len(m.unknownFields)
	return n
}

func (m *DialDataResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *DialBack) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 9
	}
	n += len(m.unknownFields)
	return n
}

func (m *DialBackResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Status))
	}
	n += len(m.unknownFields)
	return n
}

func (x DialStatus) MarshalProtoText() string {
	return x.String()
}
func (x *Message) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Message { ")
	switch body := x.Msg.(type) {
	case *Message_DialRequest:
		if body.DialRequest != nil {
			sb.WriteString(" dialRequest: ")
			sb.WriteString(body.DialRequest.MarshalProtoText())
		}
	case *Message_DialResponse:
		if body.DialResponse != nil {
			sb.WriteString(" dialResponse: ")
			sb.WriteString(body.DialResponse.MarshalProtoText())
		}
	case *Message_DialDataRequest:
		if body.DialDataRequest != nil {
			sb.WriteString(" dialDataRequest: ")
			sb.WriteString(body.DialDataRequest.MarshalProtoText())
		}
	case *Message_DialDataResponse:
		if body.DialDataResponse != nil {
			sb.WriteString(" dialDataResponse: ")
			sb.WriteString(body.DialDataResponse.MarshalProtoText())
		}
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Message) String() string {
	return x.MarshalProtoText()
}
func (x *DialRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("DialRequest { ")
	if len(x.Addrs) > 0 {
		sb.WriteString(" addrs: [")
		for i, v := range x.Addrs {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString("\"")
			sb.WriteString(base64.StdEncoding.EncodeToString(v))
			sb.WriteString("\"")
		}
		sb.WriteString("]")
	}
	if x.Nonce != 0 {
		sb.WriteString(" nonce: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Nonce), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *DialRequest) String() string {
	return x.MarshalProtoText()
}
func (x *DialDataRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("DialDataRequest { ")
	if x.AddrIdx != 0 {
		sb.WriteString(" addrIdx: ")
		sb.WriteString(strconv.FormatUint(uint64(x.AddrIdx), 10))
	}
	if x.NumBytes != 0 {
		sb.WriteString(" numBytes: ")
		sb.WriteString(strconv.FormatUint(uint64(x.NumBytes), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *DialDataRequest) String() string {
	return x.MarshalProtoText()
}
func (x DialResponse_ResponseStatus) MarshalProtoText() string {
	return x.String()
}
func (x *DialResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("DialResponse { ")
	if x.Status != 0 {
		sb.WriteString(" status: ")
		sb.WriteString(DialResponse_ResponseStatus(x.Status).String())
	}
	if x.AddrIdx != 0 {
		sb.WriteString(" addrIdx: ")
		sb.WriteString(strconv.FormatUint(uint64(x.AddrIdx), 10))
	}
	if x.DialStatus != 0 {
		sb.WriteString(" dialStatus: ")
		sb.WriteString(DialStatus(x.DialStatus).String())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *DialResponse) String() string {
	return x.MarshalProtoText()
}
func (x *DialDataResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("DialDataResponse { ")
	if len(x.Data) > 0 {
		sb.WriteString(" data: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Data))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *DialDataResponse) String() string {
	return x.MarshalProtoText()
}
func (x *DialBack) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("DialBack { ")
	if x.Nonce != 0 {
		sb.WriteString(" nonce: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Nonce), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *DialBack) String() string {
	return x.MarshalProtoText()
}
func (x DialBackResponse_DialBackStatus) MarshalProtoText() string {
	return x.String()
}
func (x *DialBackResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("DialBackResponse { ")
	if x.Status != 0 {
		sb.WriteString(" status: ")
		sb.WriteString(DialBackResponse_DialBackStatus(x.Status).String())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *DialBackResponse) String() string {
	return x.MarshalProtoText()
}
func (m *Message) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*Message_DialRequest); ok {
				if err := oneof.DialRequest.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &DialRequest{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &Message_DialRequest{DialRequest: v}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*Message_DialResponse); ok {
				if err := oneof.DialResponse.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &DialResponse{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &Message_DialResponse{DialResponse: v}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialDataRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*Message_DialDataRequest); ok {
				if err := oneof.DialDataRequest.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &DialDataRequest{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &Message_DialDataRequest{DialDataRequest: v}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialDataResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if oneof, ok := m.Msg.(*Message_DialDataResponse); ok {
				if err := oneof.DialDataResponse.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
			} else {
				v := &DialDataResponse{}
				if err := v.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
					return err
				}
				m.Msg = &Message_DialDataResponse{DialDataResponse: v}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialDataRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrIdx", wireType)
			}
			m.AddrIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumBytes", wireType)
			}
			m.NumBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumBytes |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DialResponse_ResponseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrIdx", wireType)
			}
			m.AddrIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddrIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialStatus", wireType)
			}
			m.DialStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DialStatus |= DialStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialDataResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialBack) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialBack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialBack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialBackResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialBackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialBackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DialBackResponse_DialBackStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.7.0
// source: github.com/libp2p/go-libp2p/p2p/security/noise/pb/payload.proto

package pb

import (
	base64 "encoding/base64"
	fmt "fmt"
	io "io"
	strconv "strconv"
	strings "strings"

	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
)

type NoiseExtensions struct {
	unknownFields          []byte
	WebtransportCerthashes [][]byte `protobuf:"bytes,1,rep,name=webtransport_certhashes,json=webtransportCerthashes" json:"webtransportCerthashes,omitempty"`
	StreamMuxers           []string `protobuf:"bytes,2,rep,name=stream_muxers,json=streamMuxers" json:"streamMuxers,omitempty"`
}

func (x *NoiseExtensions) Reset() {
	*x = NoiseExtensions{}
}

func (*NoiseExtensions) ProtoMessage() {}

func (x *NoiseExtensions) GetWebtransportCerthashes() [][]byte {
	if x != nil {
		return x.WebtransportCerthashes
	}
	return nil
}

func (x *NoiseExtensions) GetStreamMuxers() []string {
	if x != nil {
		return x.StreamMuxers
	}
	return nil
}

type NoiseHandshakePayload struct {
	unknownFields []byte
	IdentityKey   []byte           `protobuf:"bytes,1,opt,name=identity_key,json=identityKey" json:"identityKey,omitempty"`
	IdentitySig   []byte           `protobuf:"bytes,2,opt,name=identity_sig,json=identitySig" json:"identitySig,omitempty"`
	Extensions    *NoiseExtensions `protobuf:"bytes,4,opt,name=extensions" json:"extensions,omitempty"`
}

func (x *NoiseHandshakePayload) Reset() {
	*x = NoiseHandshakePayload{}
}

func (*NoiseHandshakePayload) ProtoMessage() {}

func (x *NoiseHandshakePayload) GetIdentityKey() []byte {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *NoiseHandshakePayload) GetIdentitySig() []byte {
	if x != nil {
		return x.IdentitySig
	}
	return nil
}

func (x *NoiseHandshakePayload) GetExtensions() *NoiseExtensions {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (m *NoiseExtensions) CloneVT() *NoiseExtensions {
	if m == nil {
		return (*NoiseExtensions)(nil)
	}
	r := new(NoiseExtensions)
	if rhs := m.WebtransportCerthashes; rhs != nil {
		tmpContainer := make([][]byte, len(rhs))
		for k, v := range rhs {
			tmpBytes := make([]byte, len(v))
			copy(tmpBytes, v)
			tmpContainer[k] = tmpBytes
		}
		r.WebtransportCerthashes = tmpContainer
	}
	if rhs := m.StreamMuxers; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.StreamMuxers = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *NoiseExtensions) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *NoiseHandshakePayload) CloneVT() *NoiseHandshakePayload {
	if m == nil {
		return (*NoiseHandshakePayload)(nil)
	}
	r := new(NoiseHandshakePayload)
	r.Extensions = m.Extensions.CloneVT()
	if rhs := m.IdentityKey; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.IdentityKey = tmpBytes
	}
	if rhs := m.IdentitySig; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.IdentitySig = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *NoiseHandshakePayload) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *NoiseExtensions) EqualVT(that *NoiseExtensions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.WebtransportCerthashes) != len(that.WebtransportCerthashes) {
		return false
	}
	for i, vx := range this.WebtransportCerthashes {
		vy := that.WebtransportCerthashes[i]
		if string(vx) != string(vy) {
			return false
		}
	}
	if len(this.StreamMuxers) != len(that.StreamMuxers) {
		return false
	}
	for i, vx := range this.StreamMuxers {
		vy := that.StreamMuxers[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *NoiseExtensions) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*NoiseExtensions)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *NoiseHandshakePayload) EqualVT(that *NoiseHandshakePayload) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if p, q := this.IdentityKey, that.IdentityKey; (p == nil && q != nil) || (p != nil && q == nil) || string(p) != string(q) {
		return false
	}
	if p, q := this.IdentitySig, that.IdentitySig; (p == nil && q != nil) || (p != nil && q == nil) || string(p) != string(q) {
		return false
	}
	if !this.Extensions.EqualVT(that.Extensions) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *NoiseHandshakePayload) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*NoiseHandshakePayload)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// NOTE: protobuf-go-lite json only supports proto3: proto2 is not supported.

func (m *NoiseExtensions) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoiseExtensions) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *NoiseExtensions) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.StreamMuxers) > 0 {
		for iNdEx := len(m.StreamMuxers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StreamMuxers[iNdEx])
			copy(dAtA[i:], m.StreamMuxers[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.StreamMuxers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WebtransportCerthashes) > 0 {
		for iNdEx := len(m.WebtransportCerthashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WebtransportCerthashes[iNdEx])
			copy(dAtA[i:], m.WebtransportCerthashes[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.WebtransportCerthashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NoiseHandshakePayload) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoiseHandshakePayload) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *NoiseHandshakePayload) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Extensions != nil {
		size, err := m.Extensions.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.IdentitySig != nil {
		i -= len(m.IdentitySig)
		copy(dAtA[i:], m.IdentitySig)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.IdentitySig)))
		i--
		dAtA[i] = 0x12
	}
	if m.IdentityKey != nil {
		i -= len(m.IdentityKey)
		copy(dAtA[i:], m.IdentityKey)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.IdentityKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NoiseExtensions) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WebtransportCerthashes) > 0 {
		for _, b := range m.WebtransportCerthashes {
			l = len(b)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if len(m.StreamMuxers) > 0 {
		for _, s := range m.StreamMuxers {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *NoiseHandshakePayload) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IdentityKey != nil {
		l = len(m.IdentityKey)
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.IdentitySig != nil {
		l = len(m.IdentitySig)
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Extensions != nil {
		l = m.Extensions.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (x *NoiseExtensions) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("NoiseExtensions {")
	if len(x.WebtransportCerthashes) > 0 {
		if sb.Len() > 17 {
			sb.WriteString(" ")
		}
		sb.WriteString("webtransport_certhashes: [")
		for i, v := range x.WebtransportCerthashes {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString("\"")
			sb.WriteString(base64.StdEncoding.EncodeToString(v))
			sb.WriteString("\"")
		}
		sb.WriteString("]")
	}
	if len(x.StreamMuxers) > 0 {
		if sb.Len() > 17 {
			sb.WriteString(" ")
		}
		sb.WriteString("stream_muxers: [")
		for i, v := range x.StreamMuxers {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}

func (x *NoiseExtensions) String() string {
	return x.MarshalProtoText()
}
func (x *NoiseHandshakePayload) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("NoiseHandshakePayload {")
	if x.IdentityKey != nil {
		if sb.Len() > 23 {
			sb.WriteString(" ")
		}
		sb.WriteString("identity_key: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.IdentityKey))
		sb.WriteString("\"")
	}
	if x.IdentitySig != nil {
		if sb.Len() > 23 {
			sb.WriteString(" ")
		}
		sb.WriteString("identity_sig: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.IdentitySig))
		sb.WriteString("\"")
	}
	if x.Extensions != nil {
		if sb.Len() > 23 {
			sb.WriteString(" ")
		}
		sb.WriteString("extensions: ")
		sb.WriteString(x.Extensions.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}

func (x *NoiseHandshakePayload) String() string {
	return x.MarshalProtoText()
}
func (m *NoiseExtensions) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoiseExtensions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoiseExtensions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebtransportCerthashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebtransportCerthashes = append(m.WebtransportCerthashes, make([]byte, postIndex-iNdEx))
			copy(m.WebtransportCerthashes[len(m.WebtransportCerthashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamMuxers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamMuxers = append(m.StreamMuxers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoiseHandshakePayload) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoiseHandshakePayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoiseHandshakePayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentityKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentityKey = append(m.IdentityKey[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentityKey == nil {
				m.IdentityKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdentitySig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdentitySig = append(m.IdentitySig[:0], dAtA[iNdEx:postIndex]...)
			if m.IdentitySig == nil {
				m.IdentitySig = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extensions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extensions == nil {
				m.Extensions = &NoiseExtensions{}
			}
			if err := m.Extensions.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
